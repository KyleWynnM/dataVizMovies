(function (d3$1) {
  'use strict';

  const scatterPlot = (
    selection,
    { data, width, height, xValue, yValue, genre, bitString }
  ) => {
    const xScale = d3$1.scaleLinear()
      .domain(d3$1.extent(data, xValue))
      .range([100, width]);

    const yScale = d3$1.scaleLinear()
      .domain(d3$1.extent(data, yValue))
      .range([height, 0]);

    const dotAppears = function(genre, bitString) {
      if ((genre.includes("Action") && bitString.charAt(0) === "1") ||
      (genre.includes("Adventure") && bitString.charAt(1) === "1") ||
      (genre.includes("Animation") && bitString.charAt(2) === "1") ||
      (genre.includes("Biography") && bitString.charAt(3) === "1") ||
      (genre.includes("Comedy") && bitString.charAt(4) === "1") ||
      (genre.includes("Crime") && bitString.charAt(5) === "1") ||
      (genre.includes("Drama") && bitString.charAt(6) === "1") ||
      (genre.includes("Family") && bitString.charAt(7) === "1") ||
      (genre.includes("Fantasy") && bitString.charAt(8) === "1") ||
      (genre.includes("History") && bitString.charAt(9) === "1") ||
      (genre.includes("Horror") && bitString.charAt(10) === "1") ||
      (genre.includes("Mystery") && bitString.charAt(11) === "1") ||
      (genre.includes("Romance") && bitString.charAt(12) === "1") ||
      (genre.includes("Sci-Fi") && bitString.charAt(13) === "1") ||
      (genre.includes("Thriller") && bitString.charAt(14) === "1")) {
        return 3;
      } else {
        return 0;
      }
    };

    selection
      .selectAll('circle')
      .data(data)
      .join('circle')
      .attr('cx', (d) => xScale(xValue(d)))
      .attr('cy', (d) => yScale(yValue(d)))
      .attr('r', (d) => dotAppears(genre(d), bitString));
  };

  const viz = (
    container,
    { state, setState, bitString }
  ) => {
    const width = window.innerWidth - 100;
    const height = window.innerHeight - 100;

    const svg = d3$1.select(container)
      .selectAll('svg')
      .data([null])
      .join('svg')
      .attr('width', width)
      .attr('height', height);

    // state.data could be:
    // * undefined
    // * 'LOADING'
    // * An array of objects
    const { data } = state;

    if (data && data !== 'LOADING') {
      svg.call(scatterPlot, {
        data,
        width,
        height,
        xValue: (d) => d.Rating,
        yValue: (d) => d.Revenue,
        genre: (d) => d.Genre,
        bitString: document.getElementById("bitstring").innerHTML,
      });
    }

    if (data === undefined) {
      setState((state) => ({
        ...state,
        data: 'LOADING',
      }));
      fetch('data.csv')
        .then((response) => response.text())
        .then((csvString) => {
          const data = d3$1.csvParse(csvString);

          setState((state) => ({
            ...state,
            data,
          }));
        });
    }
  };

  const container = d3.select('#app').node();
  let state = {};

  const checkboxes = d3.select('#checkboxes');
  const genres = d3.selectAll('input');

  checkboxes.on('click', (e) => {
    e.preventDefault();
  });

  function updateCheckboxes() {
    let bitString = '';
    for (const genre of genres) {
      if (genre.checked) {
        bitString += '1';
      } else {
        bitString += '0';
      }
    }
    document.getElementById("bitstring").innerHTML = bitString;
  }

  const render = () => {
    viz(container, {
      state,
      setState,
    });
  };

  for (const genre of genres) {
    genre.addEventListener('click', updateCheckboxes);
    genre.addEventListener('click', render);
  }

  const setState = (next) => {
    state = next(state);
    render();
  };

  render();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,